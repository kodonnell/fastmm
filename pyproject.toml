[build-system]
requires = [
    "scikit-build-core>=0.8.0",
    "pybind11>=2.12.0",
    "setuptools-scm>=8.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "fastmm"
dynamic = ["version"]
description = "Fast Map Matching - High-performance map matching library"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "kodonnell"},
]
keywords = ["map-matching", "gps", "trajectory", "routing", "GIS"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: GIS",
]

[project.optional-dependencies]
matcher = []
dev = ["pytest", "ruff"]

[project.urls]
Homepage = "https://github.com/kodonnell/fastmm"
Documentation = "https://github.com/kodonnell/fastmm"
Repository = "https://github.com/kodonnell/fastmm"

[tool.scikit-build]
# Scikit-build-core configuration for CMake integration
cmake.verbose = true
cmake.build-type = "Release"
install.components = ["python"]
wheel.install-dir = "fastmm"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[tool.setuptools_scm]
write_to = "python/fastmm/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"

[tool.cibuildwheel]
# Build for Python 3.8-3.12
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
skip = "*-win32 *-musllinux_*"

# Build verbosity
build-verbosity = 1

# Test the wheel after building
test-command = "python -c \"import fastmm; print('fastmm version:', fastmm.__version__)\""

[tool.cibuildwheel.windows]
# Install Boost and build dependencies before building
before-build = "if not exist \"C:\\vcpkg\\archives\" mkdir \"C:\\vcpkg\\archives\" && vcpkg install boost-geometry:x64-windows boost-serialization:x64-windows boost-format:x64-windows && pip install scikit-build-core setuptools-scm pybind11 delvewheel"

# Set Boost paths and vcpkg toolchain for CMake
environment = { BOOST_ROOT = "C:/vcpkg/installed/x64-windows", CMAKE_ARGS = "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake", VCPKG_FEATURE_FLAGS = "binarycaching", VCPKG_DEFAULT_BINARY_CACHE = "C:/vcpkg/archives" }

# Repair Windows wheels to bundle DLL dependencies
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:/vcpkg/installed/x64-windows/bin --ignore-existing"

# Use MSVC
config-settings = { "cmake.define.CMAKE_GENERATOR" = "Visual Studio 17 2022" }

[tool.cibuildwheel.linux]
before-build = "yum install -y boost-devel cmake3 || apt-get update && apt-get install -y libboost-all-dev cmake"

[tool.cibuildwheel.macos]
before-build = "brew install boost cmake"

[tool.ruff]
line-length = 120
target-version = "py38"
