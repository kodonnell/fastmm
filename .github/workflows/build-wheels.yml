name: Build Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]  # Add ubuntu-latest, macos-latest when ready

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache vcpkg installed packages (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            C:/vcpkg/downloads
            C:/vcpkg/archives
          key: vcpkg-${{ runner.os }}-${{ hashFiles('.github/workflows/build-wheels.yml') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16
        env:
          # Build for Python 3.8-3.12 (skip 3.13-3.14 until widely supported)
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*

          # Skip 32-bit builds and musllinux (PyPy not enabled)
          CIBW_SKIP: "*-win32 *-musllinux_*"

          # Install Boost before building
          CIBW_BEFORE_BUILD_WINDOWS: >
            mkdir -p C:/vcpkg/archives &&
            vcpkg install boost-geometry:x64-windows boost-serialization:x64-windows boost-format:x64-windows &&
            pip install scikit-build-core setuptools-scm pybind11 delvewheel
          # Ensure vcpkg binary caching is enabled and uses a stable location
          VCPKG_FEATURE_FLAGS: binarycaching
          VCPKG_DEFAULT_BINARY_CACHE: C:/vcpkg/archives
          CIBW_BEFORE_BUILD_LINUX: >
            yum install -y boost-devel cmake3 || apt-get update && apt-get install -y libboost-all-dev cmake &&
            pip install scikit-build-core setuptools-scm pybind11
          CIBW_BEFORE_BUILD_MACOS: >
            brew install boost cmake &&
            pip install scikit-build-core setuptools-scm pybind11

          # Set Boost paths for CMake
          CIBW_ENVIRONMENT_WINDOWS: >
            BOOST_ROOT=C:/vcpkg/installed/x64-windows
            CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"

          # Repair Windows wheels to bundle DLL dependencies
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            delvewheel repair -w {dest_dir} {wheel} --add-path C:/vcpkg/installed/x64-windows/bin

          # Build verbosity
          CIBW_BUILD_VERBOSITY: 1

          # Test the wheel after building
          CIBW_TEST_COMMAND: python -c "import fastmm; print('fastmm version:', fastmm.__version__)"

          # Windows-specific: use MSVC
          CIBW_CONFIG_SETTINGS_WINDOWS: 'cmake.define.CMAKE_GENERATOR="Visual Studio 17 2022"'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  release:
    name: Create GitHub release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheels-*
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.whl
          generate_release_notes: true

  publish:
    name: Publish to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheels-*
          merge-multiple: true

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

